///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using System.Management.Automation;
using System.Collections.ObjectModel;

using System.IO;

namespace project_2._powershell_testcase
{
	public partial class wait_for_process_and_get_cmd
	{
		
		int process_found = 0;
			string var_machine_user = "vagrant";
			string var_machine_password = "vagrant";
			string var_machine_name_or_ip = "vagrant-1";
			string var_process = "explorer";
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void wait_for_process()
		{
			
			
			PowerShell powerShell = PowerShell.Create();
			powerShell.AddScript("$Username = '"+var_machine_user+"';" +
			                     "$Password = '"+var_machine_password+"';" +
			                     "$pass = ConvertTo-SecureString -AsPlainText $Password -Force;" +
			                     "$Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass;" +
			                     "Invoke-Command -ComputerName "+var_machine_name_or_ip+" -ScriptBlock { Get-CimInstance Win32_Process -Filter \"name = 'notepad.exe'\" | select CommandLine} -credential $Cred");
			
			
			
			for (int i = 0; i < 30; i++) {
				if (process_found==0) {
					Collection<PSObject> PSOutput = powerShell.Invoke();
					Ranorex.Report.Info("count objects; " + PSOutput.Count);
					process_found = PSOutput.Count;
				} else{
					Ranorex.Report.Info("process found");
					break;
				}
			}
			
			
			
		}

		public void wait_for_process_async()
		{

			 //HACK Verschiedene Möglichkeiten den Sriptblock einzulesen


			 // [1] multiline
			/*
			string _script_block = "Write-Host \"Waiting for $Name\" -NoNewline" +
				"while ( (Get-Process -Name $Name -ErrorAction SilentlyContinue).Count -eq $NumberOfProcesses )"+
				"{"+
				"Write-Host '.' -NoNewline"+
				"Start-Sleep -Milliseconds 400"+
				"}"+
				"Wait-ForProcess -Name notepad -IgnoreAlreadyRunningProcesses";
			*/
			
			// [2] semicolon separated
			//string script_block = "start-sleep -s 20; get-service";
			
			// [3] ps1 script
			//string script_block = File.ReadAllText(@"invoke_start_explorer.ps1");
			
			
			string script_block = File.ReadAllText(@"wait_for_process.ps1");
			
			
			
			using (PowerShell PowerShellInstance = PowerShell.Create())
			{
				// this script has a sleep in it to simulate a long running script
				//PowerShellInstance.AddScript("start-sleep -s 20; get-service");
				
				PowerShellInstance.AddScript("$Username = '"+var_username+"';" +
			                     "$Password = 'vagrant';" +
			                     "$pass = ConvertTo-SecureString -AsPlainText $Password -Force;" +
			                     "$Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass;" +
			                     "Invoke-Command -ComputerName vagrant-1 -ScriptBlock {"+script_block+"} -credential $Cred");
				

				// begin invoke execution on the pipeline
				IAsyncResult result = PowerShellInstance.BeginInvoke();

				// do something else until execution has completed.
				// this could be sleep/wait, or perhaps some other work
				while (result.IsCompleted == false)
				{
					Ranorex.Report.Info("Waiting for pipeline to finish..." + result.IsCompleted.ToString());
					Thread.Sleep(500);
				}

				Ranorex.Report.Info("Finished!");
			}

		}

        public void get_cmd_parameter()
        {
            using (PowerShell powerShell = PowerShell.Create()){

				
				powerShell.AddScript("$Username = '"+var_username+"';" +
				                     "$Password = 'vagrant';" +
				                     "$pass = ConvertTo-SecureString -AsPlainText $Password -Force;" +
				                     "$Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass;" +
				                     "Invoke-Command -ComputerName vagrant-1 -ScriptBlock { Get-CimInstance Win32_Process -Filter \"name = '"+ var_process+".exe'\" | select CommandLine} -credential $Cred");
				
				Collection<PSObject> PSOutput = powerShell.Invoke();
				Ranorex.Report.Info("count objects; " + PSOutput.Count);
				foreach (PSObject outputItem in PSOutput)
				{
					if (outputItem != null)
					{
						string val = outputItem.Properties["CommandLine"].Value.ToString();
						Ranorex.Report.Info("ps out: " + val);
					}
				}

				if (powerShell.Streams.Error.Count > 0)
				{
					Ranorex.Report.Failure("powershell stream error");
				}
			}
        }
		
		
	}
}
