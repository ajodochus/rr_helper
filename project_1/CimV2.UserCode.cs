///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

using System.Management;
using System.Diagnostics;

namespace project_1
{
	public partial class CimV2
	{
		
		string servername = "10.0.50.20";
		//string processName = "VDogMasterService.exe";
		string processName = "notepad++.exe";
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void cim()
		{
			
			ManagementScope managementScope = new ManagementScope("\\\\"+ servername +"\\root\\cimv2");
			managementScope.Connect();
			ObjectQuery objectQuery = new ObjectQuery("SELECT commandline FROM Win32_Process Where Name = '"+ processName +"'");
			ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(managementScope, objectQuery);
			ManagementObjectCollection managementObjectCollection = managementObjectSearcher.Get();
			
			foreach (ManagementObject mo in managementObjectCollection)
			{
				Ranorex.Report.Info("process: " + mo["CommandLine"]);
				comman_to_run(mo["CommandLine"].ToString());
				
//
//				object[] methodArgs = {"notepad.exe", null, null, 0};
//				using (var managementClass = new ManagementClass(managementScope, new ManagementPath("Win32_Process"), new ObjectGetOptions()))
//				{
//					managementClass.InvokeMethod("Create", methodArgs);
//				}

			}
			
		}

		public void get_process_by_name()
		{
			for (int i = 0; i < 30; i++) {
				Process[] remoteByName = Process.GetProcessesByName("notepad++", servername);
				if (remoteByName.Length>=1) {
					Ranorex.Report.Info("process found");
					cim();
					break;
				} else {
					Ranorex.Report.Info("process not available, waiting another second ...");
					Delay.Seconds(1);
				}
			}
			
			
		}

		public void comman_to_run(string command)
		{
			Process p = new Process();
            p.StartInfo.UseShellExecute = false;
            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.RedirectStandardError = true;
            p.StartInfo.RedirectStandardInput = true;
            p.StartInfo.FileName = @"PsExec.exe";
            //p.StartInfo.Arguments = "\\\\vagrant-1 -u vagrant -p vagrant powershell -command \"Get-WMIObject –Class Win32_Bios | Select PSComputername, __Server\"";
            p.StartInfo.Arguments = @"\\BW_Server1 -accepteula -d -i " + command;
            p.Start();

            string output = p.StandardOutput.ReadToEnd();
            string errormessage = p.StandardError.ReadToEnd();

            p.WaitForExit();
		}

	}
}
